--- src/kernel/qpngio.cpp.orig	2008-01-15 20:08:57.000000000 +0100
+++ src/kernel/qpngio.cpp	2014-04-18 12:08:12.000000000 +0200
@@ -46,6 +46,9 @@
 #include "qiodevice.h"
 
 #include <png.h>
+#if PNG_LIBPNG_VER_MAJOR>1 || ( PNG_LIBPNG_VER_MAJOR==1 && PNG_LIBPNG_VER_MINOR>=5 )
+# include <zlib.h>
+#endif /* LIBPNG 1.5 */
 
 
 #ifdef Q_OS_TEMP
@@ -126,9 +129,30 @@
     png_get_IHDR(png_ptr, info_ptr, &width, &height, &bit_depth, &color_type,
 	0, 0, 0);
 
+#if PNG_LIBPNG_VER_MAJOR>1 || ( PNG_LIBPNG_VER_MAJOR==1 && PNG_LIBPNG_VER_MINOR>=5 )
+    png_colorp info_ptr_palette = NULL;
+    int info_ptr_num_palette = 0;
+    if (png_get_valid(png_ptr, info_ptr, PNG_INFO_PLTE)) {
+		png_get_PLTE(png_ptr, info_ptr, &info_ptr_palette, &info_ptr_num_palette);
+    }
+
+    png_bytep info_ptr_trans_alpha = NULL;
+    int info_ptr_num_trans = 0;
+    png_color_16p info_ptr_trans_color = NULL;
+
+    if (png_get_valid(png_ptr, info_ptr, PNG_INFO_tRNS)) {
+		png_get_tRNS(png_ptr, info_ptr, &info_ptr_trans_alpha, &info_ptr_num_trans, &info_ptr_trans_color);
+    }
+#endif /* LIBPNG 1.5 */
+
     if ( color_type == PNG_COLOR_TYPE_GRAY ) {
 	// Black & White or 8-bit grayscale
-	if ( bit_depth == 1 && info_ptr->channels == 1 ) {
+#if PNG_LIBPNG_VER_MAJOR>1 || ( PNG_LIBPNG_VER_MAJOR==1 && PNG_LIBPNG_VER_MINOR>=5 )
+	if ( bit_depth == 1 && png_get_channels(png_ptr, info_ptr) == 1 )
+#else /* LIBPNG 1.5 */
+ 	if ( bit_depth == 1 && info_ptr->channels == 1 )
+#endif /* LIBPNG 1.5 */
+	{
 	    png_set_invert_mono( png_ptr );
 	    png_read_update_info( png_ptr, info_ptr );
 	    if (!image.create( width, height, 1, 2, QImage::BigEndian ))
@@ -158,20 +182,30 @@
 	    if (!image.create(width, height, 8, ncols))
 		return;
 	    for (int i=0; i<ncols; i++) {
-		int c = i*255/(ncols-1);
-		image.setColor( i, qRgba(c,c,c,0xff) );
+			int c = i*255/(ncols-1);
+			image.setColor( i, qRgba(c,c,c,0xff) );
 	    }
 	    if ( png_get_valid(png_ptr, info_ptr, PNG_INFO_tRNS) ) {
-		const int g = info_ptr->trans_values.gray;
-		if (g < ncols) {
-		    image.setAlphaBuffer(TRUE);
-		    image.setColor(g, image.color(g) & RGB_MASK);
-		}
+#if PNG_LIBPNG_VER_MAJOR>1 || ( PNG_LIBPNG_VER_MAJOR==1 && PNG_LIBPNG_VER_MINOR>=5 )
+			const int g = info_ptr_trans_color->gray;
+#elif ( PNG_LIBPNG_VER_MAJOR==1 && PNG_LIBPNG_VER_MINOR>=4 )
+ 			const int g = info_ptr->trans_color.gray;
+#else
+ 			const int g = info_ptr->trans_values.gray;
+#endif
+			if (g < ncols) {
+		    	image.setAlphaBuffer(TRUE);
+		    	image.setColor(g, image.color(g) & RGB_MASK);
+			}
 	    }
-	}
+	  } /* PNG_COLOR_TYPE_GRAY */
     } else if ( color_type == PNG_COLOR_TYPE_PALETTE
      && png_get_valid(png_ptr, info_ptr, PNG_INFO_PLTE)
-     && info_ptr->num_palette <= 256 )
+#if PNG_LIBPNG_VER_MAJOR>1 || ( PNG_LIBPNG_VER_MAJOR==1 && PNG_LIBPNG_VER_MINOR>=5 )
+     && info_ptr_num_palette <= 256  )
+#else
+     && info_ptr->num_palette <= 256  )
+#endif
     {
 	// 1-bit and 8-bit color
 	if ( bit_depth != 1 )
@@ -179,28 +213,54 @@
 	png_read_update_info( png_ptr, info_ptr );
 	png_get_IHDR(png_ptr, info_ptr,
 	    &width, &height, &bit_depth, &color_type, 0, 0, 0);
-	if (!image.create(width, height, bit_depth, info_ptr->num_palette,
+#if PNG_LIBPNG_VER_MAJOR>1 || ( PNG_LIBPNG_VER_MAJOR==1 && PNG_LIBPNG_VER_MINOR>=5 )
+	if (!image.create(width, height, bit_depth, info_ptr_num_palette,
+#else /* LIBPNG 1.5 */
+ 	if (!image.create(width, height, bit_depth, info_ptr->num_palette,
+#endif /* LIBPNG 1.5 */
 	    QImage::BigEndian))
 	    return;
 	int i = 0;
 	if ( png_get_valid(png_ptr, info_ptr, PNG_INFO_tRNS) ) {
-	    image.setAlphaBuffer( TRUE );
-	    while ( i < info_ptr->num_trans ) {
+		image.setAlphaBuffer( true );
+#if PNG_LIBPNG_VER_MAJOR>1 || ( PNG_LIBPNG_VER_MAJOR==1 && PNG_LIBPNG_VER_MINOR>=5 )
+	    while ( i < info_ptr_num_trans ) {
 		image.setColor(i, qRgba(
-		    info_ptr->palette[i].red,
-		    info_ptr->palette[i].green,
-		    info_ptr->palette[i].blue,
-		    info_ptr->trans[i]
+		    info_ptr_palette[i].red,
+		    info_ptr_palette[i].green,
+		    info_ptr_palette[i].blue,
+#else /* LIBPNG 1.5 */
+ 	    while ( i < info_ptr->num_trans ) {
+ 		image.setColor(i, qRgba(
+ 		    info_ptr->palette[i].red,
+ 		    info_ptr->palette[i].green,
+ 		    info_ptr->palette[i].blue,
+#endif
+#if PNG_LIBPNG_VER_MAJOR>1 || ( PNG_LIBPNG_VER_MAJOR==1 && PNG_LIBPNG_VER_MINOR>=5 )
+		    info_ptr_trans_alpha[i]
+#elif ( PNG_LIBPNG_VER_MAJOR==1 && PNG_LIBPNG_VER_MINOR>=4 )
+ 		    info_ptr->trans_alpha[i]
+#else
+ 		    info_ptr->trans[i]
+#endif
 		    )
 		);
 		i++;
 	    }
 	}
-	while ( i < info_ptr->num_palette ) {
+#if PNG_LIBPNG_VER_MAJOR>1 || ( PNG_LIBPNG_VER_MAJOR==1 && PNG_LIBPNG_VER_MINOR>=5 )
+	while ( i < info_ptr_num_palette ) {
 	    image.setColor(i, qRgba(
-		info_ptr->palette[i].red,
-		info_ptr->palette[i].green,
-		info_ptr->palette[i].blue,
+		info_ptr_palette[i].red,
+		info_ptr_palette[i].green,
+		info_ptr_palette[i].blue,
+#else /* LIBPNG 1.5 */
+ 	while ( i < info_ptr->num_palette ) {
+ 	    image.setColor(i, qRgba(
+ 		info_ptr->palette[i].red,
+ 		info_ptr->palette[i].green,
+ 		info_ptr->palette[i].blue,
+#endif /* LIBPNG 1.5 */
 		0xff
 		)
 	    );
@@ -227,7 +287,7 @@
 		    PNG_FILLER_BEFORE : PNG_FILLER_AFTER);
 	    // We want 4 bytes, but it isn't an alpha channel
 	} else {
-	    image.setAlphaBuffer(TRUE);
+	    image.setAlphaBuffer(true);
 	}
 
 	if ( QImage::systemByteOrder() == QImage::BigEndian ) {
@@ -287,7 +347,12 @@
 	return;
     }
 
-    if (setjmp(png_ptr->jmpbuf)) {
+#if PNG_LIBPNG_VER_MAJOR>1 || ( PNG_LIBPNG_VER_MAJOR==1 && PNG_LIBPNG_VER_MINOR>=5 )
+    if (setjmp(png_jmpbuf(png_ptr)))
+#else /* LIBPNG 1.5 */
+     if (setjmp(png_ptr->jmpbuf))
+#endif /* LIBPNG 1.5 */
+    {
 	png_destroy_read_struct(&png_ptr, &info_ptr, &end_info);
 	iio->setStatus(-4);
 	return;
@@ -324,9 +389,15 @@
 png_get_valid(png_ptr, info_ptr, PNG_INFO_tRNS)
     if (image.depth()==32 && png_get_valid(png_ptr, info_ptr, PNG_INFO_tRNS)) {
 	QRgb trans = 0xFF000000 | qRgb(
+#if PNG_LIBPNG_VER < 10400
+	      (info_ptr->trans_color.red << 8 >> bit_depth)&0xff,
+	      (info_ptr->trans_color.green << 8 >> bit_depth)&0xff,
+	      (info_ptr->trans_color.blue << 8 >> bit_depth)&0xff);
+#else
 	      (info_ptr->trans_values.red << 8 >> bit_depth)&0xff,
 	      (info_ptr->trans_values.green << 8 >> bit_depth)&0xff,
 	      (info_ptr->trans_values.blue << 8 >> bit_depth)&0xff);
+#endif
 	for (uint y=0; y<height; y++) {
 	    for (uint x=0; x<info_ptr->width; x++) {
 		if (((uint**)jt)[y][x] == trans) {
@@ -368,7 +439,7 @@
 	while ( n-- && qAlpha(*c++)==0xff )
 	    ;
 	if ( n<0 ) // LIAR!
-	    image.setAlphaBuffer(FALSE);
+	    image.setAlphaBuffer(false);
     }
 
     iio->setImage(image);
@@ -472,7 +543,12 @@
 	return FALSE;
     }
 
-    if (setjmp(png_ptr->jmpbuf)) {
+#if PNG_LIBPNG_VER_MAJOR>1 || ( PNG_LIBPNG_VER_MAJOR==1 && PNG_LIBPNG_VER_MINOR>=5 )
+    if (setjmp(png_jmpbuf(png_ptr)))
+#else /* LIBPNG 1.5 */
+     if (setjmp(png_ptr->jmpbuf))
+#endif /* LIBPNG 1.5 */
+    {
 	png_destroy_write_struct(&png_ptr, &info_ptr);
 	return FALSE;
     }
@@ -494,10 +570,18 @@
 
     png_set_write_fn(png_ptr, (void*)this, qpiw_write_fn, qpiw_flush_fn);
 
-    info_ptr->channels =
-	(image.depth() == 32)
-	    ? (image.hasAlphaBuffer() ? 4 : 3)
-	    : 1;
+#if PNG_LIBPNG_VER_MAJOR>1 || ( PNG_LIBPNG_VER_MAJOR==1 && PNG_LIBPNG_VER_MINOR>=5 )
+#warning XXXtnn not too sure about this
+/* 
+	according to png.h, channels is only used on read, not writes, so we
+	should be able to comment this out.
+*/
+#else /* LIBPNG 1.5 */
+     info_ptr->channels =
+ 	(image.depth() == 32)
+ 	    ? (image.hasAlphaBuffer() ? 4 : 3)
+ 	    : 1;
+#endif /* LIBPNG 1.5 */
 
     png_set_IHDR(png_ptr, info_ptr, image.width(), image.height(),
 	image.depth() == 1 ? 1 : 8 /* per channel */,
@@ -508,10 +592,18 @@
 	    : PNG_COLOR_TYPE_PALETTE, 0, 0, 0);
 
 
-    //png_set_sBIT(png_ptr, info_ptr, 8);
-    info_ptr->sig_bit.red = 8;
-    info_ptr->sig_bit.green = 8;
-    info_ptr->sig_bit.blue = 8;
+#if PNG_LIBPNG_VER_MAJOR>1 || ( PNG_LIBPNG_VER_MAJOR==1 && PNG_LIBPNG_VER_MINOR>=5 )
+    png_color_8 sig_bit;
+    sig_bit.red = 8;
+    sig_bit.green = 8;
+    sig_bit.blue = 8;
+    png_set_sBIT(png_ptr, info_ptr, &sig_bit);
+#else /* LIBPNG 1.5 */
+     //png_set_sBIT(png_ptr, info_ptr, 8);
+     info_ptr->sig_bit.red = 8;
+     info_ptr->sig_bit.green = 8;
+     info_ptr->sig_bit.blue = 8;
+#endif /* LIBPNG 1.5 */
 
     if (image.depth() == 1 && image.bitOrder() == QImage::LittleEndian)
        png_set_packswap(png_ptr);
@@ -525,11 +617,22 @@
 	png_set_PLTE(png_ptr, info_ptr, palette, num_palette);
 	int* trans = new int[num_palette];
 	int num_trans = 0;
-	for (int i=0; i<num_palette; i++) {
-	    QRgb rgb=image.color(i);
-	    info_ptr->palette[i].red = qRed(rgb);
-	    info_ptr->palette[i].green = qGreen(rgb);
-	    info_ptr->palette[i].blue = qBlue(rgb);
+#if PNG_LIBPNG_VER_MAJOR>1 || ( PNG_LIBPNG_VER_MAJOR==1 && PNG_LIBPNG_VER_MINOR>=5 )
+	png_colorp info_ptr_palette = NULL;
+	int tmp;
+	png_get_PLTE(png_ptr, info_ptr, &info_ptr_palette, &tmp);
+#endif /* LIBPNG 1.5 */
+ 	for (int i=0; i<num_palette; i++) {
+ 	    QRgb rgb=image.color(i);
+#if PNG_LIBPNG_VER_MAJOR>1 || ( PNG_LIBPNG_VER_MAJOR==1 && PNG_LIBPNG_VER_MINOR>=5 )
+	    info_ptr_palette[i].red = qRed(rgb);
+	    info_ptr_palette[i].green = qGreen(rgb);
+	    info_ptr_palette[i].blue = qBlue(rgb);
+#else /* LIBPNG 1.5 */
+ 	    info_ptr->palette[i].red = qRed(rgb);
+ 	    info_ptr->palette[i].green = qGreen(rgb);
+ 	    info_ptr->palette[i].blue = qBlue(rgb);
+#endif /* LIBPNG 1.5 */
 	    if (image.hasAlphaBuffer()) {
 		trans[i] = rgb >> 24;
 		if (trans[i] < 255) {
@@ -537,6 +640,9 @@
 		}
 	    }
 	}
+#if PNG_LIBPNG_VER_MAJOR>1 || ( PNG_LIBPNG_VER_MAJOR==1 && PNG_LIBPNG_VER_MINOR>=5 )
+	png_set_PLTE(png_ptr, info_ptr, info_ptr_palette, num_palette);
+#endif /* LIBPNG 1.5 */
 	if (num_trans) {
 	    copy_trans = new png_byte[num_trans];
 	    for (int i=0; i<num_trans; i++)
@@ -547,7 +653,14 @@
     }
 
     if ( image.hasAlphaBuffer() ) {
-	info_ptr->sig_bit.alpha = 8;
+#if PNG_LIBPNG_VER_MAJOR>1 || ( PNG_LIBPNG_VER_MAJOR==1 && PNG_LIBPNG_VER_MINOR>=5 )
+        png_color_8p sig_bit;
+        png_get_sBIT(png_ptr, info_ptr, &sig_bit);
+        sig_bit->alpha = 8;
+        png_set_sBIT(png_ptr, info_ptr, sig_bit);
+#else /* LIBPNG 1.5 */
+ 	info_ptr->sig_bit.alpha = 8;
+#endif /* LIBPNG 1.5 */
     }
 
     // Swap ARGB to RGBA (normal PNG format) before saving on
@@ -1033,7 +1146,12 @@
 	    return -1;
 	}
 
-	if (setjmp((png_ptr)->jmpbuf)) {
+#if PNG_LIBPNG_VER_MAJOR>1 || ( PNG_LIBPNG_VER_MAJOR==1 && PNG_LIBPNG_VER_MINOR>=5 )
+    if (setjmp(png_jmpbuf(png_ptr)))
+#else /* LIBPNG 1.5 */
+     if (setjmp(png_ptr->jmpbuf))
+#endif /* LIBPNG 1.5 */
+	{
 	    png_destroy_read_struct(&png_ptr, &info_ptr, 0);
 	    image = 0;
 	    return -1;
@@ -1060,7 +1178,12 @@
 
     if ( !png_ptr ) return 0;
 
-    if (setjmp(png_ptr->jmpbuf)) {
+#if PNG_LIBPNG_VER_MAJOR>1 || ( PNG_LIBPNG_VER_MAJOR==1 && PNG_LIBPNG_VER_MINOR>=5 )
+    if (setjmp(png_jmpbuf(png_ptr)))
+#else /* LIBPNG 1.5 */
+     if (setjmp(png_ptr->jmpbuf))
+#endif /* LIBPNG 1.5 */
+    {
 	png_destroy_read_struct(&png_ptr, &info_ptr, 0);
 	image = 0;
 	state = MovieStart;
@@ -1120,7 +1243,11 @@
     consumer->frameDone(QPoint(offx,offy),r);
     consumer->end();
     state = FrameStart;
-    unused_data = (int)png->buffer_size; // Since libpng doesn't tell us
+#if PNG_LIBPNG_VER_MAJOR>1 || ( PNG_LIBPNG_VER_MAJOR==1 && PNG_LIBPNG_VER_MINOR>=5 )
+    unused_data = png_process_data_pause(png, 0);
+#else /* LIBPNG 1.5 */
+     unused_data = (int)png->buffer_size; // Since libpng doesn't tell us
+#endif /* LIBPNG 1.5 */
 }
 
 #ifdef PNG_USER_CHUNKS_SUPPORTED
